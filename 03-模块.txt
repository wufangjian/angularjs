在javascript中，将函数代码全部都定义在全局命名空间是存在很大问题的，这样会导致代码冲突，调试难度增加，浪费时间。
在上一章我们把 控制代码写在全局空间里：
function MyController($scope) {
	var updateClock = function() {
		$scope.clock = new Date();
	};
	
	setInterval(function() {
		$scope.$apply(updateClock);
	}, 1000);

	updateClock();
};

本章我们将讨论如何写出高效、能用在生产环境中的控制代码，并把他封装在一个称之为模块的单元内。

在angularjs中模块是定义应用的最主要方式。模块包含了主要的应用代码，一个应用可以包含多个模块，每个模块都包含了定义了具体功能的代码。
模块化的优点：
	1)保持全局命名空间的清洁
	2)方便编写测试代码
	3)易于在不同应用中复用代码
	4)使应用能够以任意顺序加载模块

定义模块：angular.module('myApp', []);
这个方法相当于angularjs的setter方法，是用来定义模块的

调用这个方法时如果只传递一个参数，就可以用它来引用模块。
引用模块：angular.module('myApp')
这个方法相当于angularjs的getter方法，是用来获取对模块的引用

接下来我们就可以在angular.module('myApp')返回对象上创建我们的应用了
开发大型应用时，我们会创建多个模块来承载业务逻辑。将复杂功能分割成不同的模块，有助于单独编写测试


【3.1 参数】
下面是 angular.module()的参数列表

【3.1.1 name(字符串)】
name是模块的名称，字符串变量

【3.1.2 requires 字符串数组】
requires 包含了一个字符串变量组成的列表，每个元素都是一个模块名称，本模块依赖这些模块，依赖需要在加载本模块之前由注入器进行预加载。

