
【前言】
作用域是angularjs应用的核心基础。因此了解作用域对我们开发应用非常重要

应用的作用域(scope)是和应用的[数据模型]相关联的，同时也是表达式执行的上下文。$scope对象是定义[业务逻辑、控制器方法、视图]的地方。

作用域是视图和控制器的胶水。在应用将视图渲染并呈现给用户之前，视图中的模板会和作用域进行连接，然后应用会对DOM进行设置以便将属性变化通知给angularjs。这个功能让XHR请求等promise对象的实现变得非常容易。

作用域是应用状态的基础。 当视图数据修改时会通知$scope，当$scope发生改变的时候会立即重新渲染视图。

angularjs将$scope设计成和DOM类似的结构，因此$scope可以进行嵌套，也就是说我们可以引用父亲级$scope中的属性


作用域提供了监视数据模型变化的能力。它允许开发者使用其中的apply机制，将数据模型的改变在整个应用范围内进行通知。我们在作用域的上下文中定义和执行表达式，同事它也是 将事件通知给另外一个控制器或者应用其他部分的 中介

[将应用的业务逻辑都放在控制器中，而将相关的数据都放在控制器的作用域中，这是非常完美的架构]



【4.1 视图和$scope的世界】
angularjs 启动生成视图时，会将ng-app元素同$rootScope进行绑定。$rootScope是所有$scope的最上层

$rootScope是angularjs中最接近全局作用域的对象。在$rootScope上附加太多逻辑并不是好主意,这与javascript中污染全局作用域是一样的。

$scope对象就是一个普通的javascript对象，我们可以在其上随意添加或修改属性
$scope对象在angularjs中充当数据模型。 但它并不负责处理和操作数据。只是视图和HTML之间桥梁，控制器和视图之间的胶水

$scope 中的所有属性都能被视图访问到
<div ng-app="myApp">
       <h1>Hello {{ name }}</h1>
</div>

我们希望{{name}}变量是本地$scope的属性
angular.module('myApp', [])
   .run(function($rootScope) {
     $rootScope.name = "World";
});


